FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# FIWARE OFNIC
The NetIC Restful API API is intended to access network status information and to allow a pre-defined level of programmability within the network. This programmability may also enable network virtualization, i. e., the abstraction of the physical network resources as well as their control by a virtual network provider. This is a RESTful, resource-oriented API accessed via HTTP that uses JSON-based representations for information interchange.
It should be noted that the exposition of specific capabilities via the northbound interface depends on the capabilities and the technology of the underlying network. Users of the API will be able to explore the functionalities, by navigating this API in a RESTful fashion.

# Allowed HTTPs requests:  
- PUT   : To create resource   
- POST  : Update resource  
- GET   : Get a resource or list of resources  
- DELETE : To delete resource  
  
# Description Of Usual Server Responses:  
- 200 `OK` - the request was successful (some API calls may return 201 instead).  
- 201 `Created` - the request was successful and a resource was created.  
- 204 `No Content` - the request was successful but there is no representation to return (i.e. the response is empty).  
- 400 `Bad Request` - the request could not be understood or was missing required parameters.  
- 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.  
- 403 `Forbidden` - access denied.  
- 404 `Not Found` - resource was not found.  
- 405 `Method Not Allowed` - requested method is not supported for resource.  

# Authentication
Each HTTP request against the NetIC RESTful API requires the inclusion of specific authentication credentials. The specific implementation of this API may support multiple authentication schemes (OAuth, Basic Auth, Token) and will be determined by the specific provider that implements the GE. Please contact with it to determine the best way to authenticate against this API. Remember that some authentication schemes may require that the API operate using SSL over HTTP (HTTPS).

# NetIC API core
This API exposes a set of commands on the NetIC GE that enables information retrieval from and some level of control of the underlying network. This is done through manipulating different objects, like:
- Network
- Node
- Port
- Link
- VirtualPath 
   
 ---  

# API Operations 
In this section we go in depth for each operation. The API operations are divided into three groups of functionalities: 
 - Synchronize 
 - Monitor
 - Virtualpaths
 
The next subsections will provide an insight of all the possible commands of each group.

---

# Synchronize
Synchronize commands allow the users of the NetIC API to retrieve information about network topology, node configuration, port status, etc.

### GET /netic.v1/OFNIC/synchronize/network
Get list of nodes and virtual paths. 

## Example

        https://localhost:2222/netic.v1/OFNIC/synchronize/network

### Response 200 (application/json)

    [   
        {
            "paths":[],
            "nodes":[
                "00:00:00:00:00:00:00:02",
                "00:00:00:00:00:00:00:01",
                "00:00:00:00:00:00:00:03"
                ]
        }
    ]
    
+ Response 200 (application/json)

        [   
            {
                "paths":[],
                "nodes":[
                    "00:00:00:00:00:00:00:02",
                    "00:00:00:00:00:00:00:01",
                    "00:00:00:00:00:00:00:03"
                    ]
            }
        ]
    

### GET /netic.v1/OFNIC/synchronize/network/node/{nodeID}
Retrieve information about the node with id: nodeID

## Example

        https://localhost:2222/netic.v1/OFNIC/synchronize/network/node/00:00:00:00:00:00:00:01

### Response 200 (application/json)

    [
        {
            "id":"2",
            "type":"OF"
        },
        {   
            "id":"1",
            "type":"OF"
        },
        {
            "id":"0",
            "type":"SW"
        }
    ]

+ Response 200 (application/json)

        [
            {
                "id":"2",
                "type":"OF"
            },
            {   
                "id":"1",
                "type":"OF"
            },
            {
                "id":"0",
                "type":"SW"
            }
        ]


